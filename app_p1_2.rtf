{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import streamlit as st\
import pandas as pd\
import matplotlib.pyplot as plt\
import numpy as np\
from PIL import Image\
from io import BytesIO\
import requests\
\
# --- Paleta de Colores ---\
# Definici\'f3n de colores en formato RGB (0-1) para Matplotlib\
color_primario_1_rgb = (14/255, 69/255, 74/255)   # 0E454A (Oscuro)\
color_primario_2_rgb = (31/255, 255/255, 95/255)  # 1FFF5F (Verde vibrante)\
color_primario_3_rgb = (255/255, 255/255, 255/255) # FFFFFF (Blanco)\
\
# Colores del logo de Sustrend para complementar\
color_sustrend_1_rgb = (0/255, 155/255, 211/255)   # 009BD3 (Azul claro)\
color_sustrend_2_rgb = (0/255, 140/255, 207/255)   # 008CCF (Azul medio)\
color_sustrend_3_rgb = (0/255, 54/255, 110/255)    # 00366E (Azul oscuro)\
\
# Selecci\'f3n de colores para los gr\'e1ficos\
# Usar\'e9 una combinaci\'f3n de los colores primarios y Sustrend para contraste\
colors_for_charts = [color_primario_1_rgb, color_primario_2_rgb, color_sustrend_1_rgb, color_sustrend_3_rgb]\
\
# --- Configuraci\'f3n de la p\'e1gina de Streamlit ---\
st.set_page_config(layout="wide")\
\
st.title('
\f1 \uc0\u10024 
\f0  Visualizador de Impactos - Proyecto P1.2')\
st.subheader('Reducci\'f3n del uso de sorbato de potasio en ciruelas deshidratadas mediante aspersi\'f3n electrost\'e1tica')\
st.markdown("""\
    Ajusta los par\'e1metros para explorar c\'f3mo las proyecciones de impacto ambiental y econ\'f3mico del proyecto\
    var\'edan con diferentes escenarios de volumen procesado, porcentaje de reducci\'f3n de sorbato y porcentaje de devoluciones evitadas.\
""")\
\
# --- 1. Datos del Proyecto (L\'ednea Base y Proyecciones) ---\
# Datos extra\'eddos de la ficha t\'e9cnica P1.2\
data_p12 = \{\
    "indicador": [\
        "Reducci\'f3n en el uso de sorbato de potasio (kg/a\'f1o)",\
        "GEI evitados por transporte de devoluciones (tCO\uc0\u8322 e/a\'f1o)",\
        "Ahorro en costos por sorbato de potasio (USD/a\'f1o)",\
        "P\'e9rdida y desperdicio de alimentos (PDA) evitado (ton/a\'f1o)",\
        "P\'e9rdidas econ\'f3micas asociadas a la PDA evitada (USD/a\'f1o)"\
    ],\
    "unidad": ["kg/a\'f1o", "tCO\uc0\u8322 e/a\'f1o", "USD/a\'f1o", "ton/a\'f1o", "USD/a\'f1o"],\
    "valor_base_ficha_ejemplo": [\
        1600, # Para 1000 ton de producci\'f3n y reducci\'f3n de 1.6 g/kg\
        6,    # Para 5% de 50 ton y 12000 km\
        8000, # Para 1000 ton de producci\'f3n y reducci\'f3n del 40% (1.6 kg/ton * $5/kg)\
        50,   # Rango 25-50 ton/a\'f1o, tomamos 50 como ejemplo alto\
        160000 # Para 50 ton * $3200/ton\
    ],\
    "produccion_anual_ejemplo_ton": [\
        1000, # para sorbato\
        1000, # para GEI (asumiendo 50 ton evitado de un env\'edo de 1000 ton)\
        1000, # para ahorro sorbato\
        None, # PDA ejemplo no especifica volumen de exportacion\
        None  # PDA econ\'f3mica ejemplo no especifica volumen de exportacion\
    ],\
    "dosis_sorbato_conv_g_kg": [4, None, None, None, None], # 4 g/kg de ficha\
    "dosis_sorbato_opt_g_kg": [2.4, None, None, None, None], # 2.4 g/kg de ficha\
    "precio_sorbato_usd_kg": [None, None, 5, None, None],\
    "porcentaje_rechazo_evitado_transporte": [5, None, None, None, None], # 5% de la ficha\
    "volumen_envio_rechazado_ejemplo_ton": [50, None, None, None, None], # 50 ton de la ficha\
    "distancia_transporte_km": [12000, None, None, None, None],\
    "factor_emision_co2e_ton_km": [0.01, None, None, None, None],\
    "precio_ciruela_exportacion_usd_ton": [None, None, None, None, 3200],\
    "rango_pda_evitada_min_ton": [None, None, None, 25, None],\
    "rango_pda_evitada_max_ton": [None, None, None, 50, None],\
\}\
\
df_diagnostico_p12 = pd.DataFrame(data_p12)\
\
# --- 2. Widgets Interactivos para Par\'e1metros (Streamlit) ---\
st.sidebar.header('Par\'e1metros de Simulaci\'f3n')\
\
produccion_anual = st.sidebar.slider(\
    'Producci\'f3n Anual (ton):',\
    min_value=100,\
    max_value=5000,\
    value=1000,\
    step=100,\
    help="Volumen total de ciruelas procesadas anualmente."\
)\
\
porcentaje_reduccion_sorbato = st.sidebar.slider(\
    'Reducci\'f3n Sorbato (%):',\
    min_value=20.0,\
    max_value=60.0,\
    value=40.0,\
    step=1.0,\
    help="Porcentaje de reducci\'f3n en el uso de sorbato de potasio."\
)\
\
porcentaje_devoluciones_evitadas = st.sidebar.slider(\
    'Devoluciones Evitadas (% del env\'edo rechazado):',\
    min_value=0.0,\
    max_value=10.0,\
    value=5.0,\
    step=0.5,\
    help="Porcentaje de env\'edos rechazados que se evitan gracias a la tecnolog\'eda."\
)\
\
precio_ciruela = st.sidebar.slider(\
    'Precio Ciruela Exportaci\'f3n (USD/ton):',\
    min_value=2000,\
    max_value=5000,\
    value=3200,\
    step=100,\
    help="Precio promedio de exportaci\'f3n de la tonelada de ciruela."\
)\
\
# --- 3. C\'e1lculos de Indicadores ---\
\
# Reducci\'f3n sorbato (kg/a\'f1o)\
dosis_conv_g_kg = df_diagnostico_p12.loc[0, 'dosis_sorbato_conv_g_kg']\
dosis_optim_g_kg = dosis_conv_g_kg * (1 - porcentaje_reduccion_sorbato / 100)\
reduccion_sorbato_kg_a\'f1o = (dosis_conv_g_kg - dosis_optim_g_kg) * produccion_anual / 1000 # Convertir g/kg a kg/ton\
\
# Ahorro en costos por sorbato (USD/a\'f1o)\
precio_sorbato = df_diagnostico_p12.loc[2, 'precio_sorbato_usd_kg']\
ahorro_costos_sorbato_usd_a\'f1o = reduccion_sorbato_kg_a\'f1o * precio_sorbato\
\
# PDA evitado (ton/a\'f1o)\
# Usaremos el rango de PDA evitada de la ficha (25-50 ton) como base y ajustaremos con el % de devoluciones evitadas\
# sobre el volumen anual para una estimaci\'f3n.\
pda_evitada_ton_a\'f1o = (porcentaje_devoluciones_evitadas / df_diagnostico_p12.loc[1, 'porcentaje_rechazo_evitado_transporte']) * df_diagnostico_p12.loc[1, 'volumen_envio_rechazado_ejemplo_ton']\
pda_evitada_ton_a\'f1o = min(pda_evitada_ton_a\'f1o, df_diagnostico_p12.loc[3, 'rango_pda_evitada_max_ton'])\
\
\
# GEI evitados por transporte (tCO\uc0\u8322 e/a\'f1o)\
gei_evitados_tco2e_a\'f1o = pda_evitada_ton_a\'f1o * (df_diagnostico_p12.loc[1, 'distancia_transporte_km'] * df_diagnostico_p12.loc[1, 'factor_emision_co2e_ton_km'] / 1000)\
\
# P\'e9rdidas econ\'f3micas asociadas a PDA evitada (USD/a\'f1o)\
perdidas_economicas_pda_evitada_usd_a\'f1o = pda_evitada_ton_a\'f1o * precio_ciruela\
\
st.header('Resultados Proyectados Anuales:')\
\
col1, col2, col3 = st.columns(3)\
\
with col1:\
    st.metric(label="
\f1 \uc0\u55358 \u56810 
\f0  **Reducci\'f3n en Uso de Sorbato**", value=f"\{reduccion_sorbato_kg_a\'f1o:.2f\} kg")\
    st.caption("Menor cantidad de conservante qu\'edmico utilizado.")\
with col2:\
    st.metric(label="
\f1 \uc0\u55357 \u56504 
\f0  **Ahorro en Costos por Sorbato**", value=f"USD \{ahorro_costos_sorbato_usd_a\'f1o:,.2f\}")\
    st.caption("Ahorro econ\'f3mico directo por la reducci\'f3n en el uso de sorbato.")\
with col3:\
    st.metric(label="
\f1 \uc0\u55357 \u56785 \u65039 
\f0  **PDA Evitado**", value=f"\{pda_evitada_ton_a\'f1o:.2f\} ton")\
    st.caption("Reducci\'f3n de P\'e9rdida y Desperdicio de Alimentos.")\
\
col4, col5 = st.columns(2)\
\
with col4:\
    st.metric(label="
\f1 \uc0\u55356 \u57102 
\f0  **GEI Evitados por Devoluciones**", value=f"\{gei_evitados_tco2e_a\'f1o:.2f\} tCO\uc0\u8322 e")\
    st.caption("Reducci\'f3n de emisiones de gases de efecto invernadero por evitar transporte inverso de devoluciones.")\
with col5:\
    st.metric(label="
\f1 \uc0\u55357 \u56496 
\f0  **P\'e9rdidas Econ\'f3micas Asociadas a PDA Evitada**", value=f"USD \{perdidas_economicas_pda_evitada_usd_a\'f1o:,.2f\}")\
    st.caption("Ahorros econ\'f3micos directos al evitar el desperdicio de ciruelas.")\
\
st.markdown("---")\
\
st.header('
\f1 \uc0\u55357 \u56522 
\f0  An\'e1lisis Gr\'e1fico de Impactos')\
\
# --- Visualizaci\'f3n (Gr\'e1ficos 2D con Matplotlib) ---\
# C\'e1lculo de valores de l\'ednea base para los gr\'e1ficos (desde los datos de la ficha)\
reduccion_sorbato_base_ejemplo = df_diagnostico_p12.loc[0, 'valor_base_ficha_ejemplo']\
pda_evitada_base_ejemplo = df_diagnostico_p12.loc[3, 'rango_pda_evitada_max_ton']\
perdidas_economicas_pda_base_ejemplo = df_diagnostico_p12.loc[4, 'valor_base_ficha_ejemplo']\
\
# Creamos una figura con 3 subplots (2D)\
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 7), facecolor=color_primario_3_rgb)\
fig.patch.set_facecolor(color_primario_3_rgb)\
\
# Definici\'f3n de etiquetas y valores para los gr\'e1ficos de barras 2D\
labels = ['L\'ednea Base', 'Proyecci\'f3n']\
bar_width = 0.6\
x = np.arange(len(labels))\
\
# --- Gr\'e1fico 1: Reducci\'f3n Sorbato (kg/a\'f1o) ---\
sorbato_values = [reduccion_sorbato_base_ejemplo, reduccion_sorbato_kg_a\'f1o]\
bars1 = ax1.bar(x, sorbato_values, width=bar_width, color=[colors_for_charts[0], colors_for_charts[1]])\
ax1.set_ylabel('Kilogramos/a\'f1o', fontsize=12, color=colors_for_charts[3])\
ax1.set_title('Reducci\'f3n Uso Sorbato de Potasio', fontsize=14, color=colors_for_charts[3], pad=20) # Aumentado pad\
ax1.set_xticks(x)\
ax1.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax1.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax1.spines['top'].set_visible(False)\
ax1.spines['right'].set_visible(False)\
ax1.tick_params(axis='x', length=0)\
ax1.set_ylim(bottom=0)\
for bar in bars1:\
    yval = bar.get_height()\
    ax1.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, round(yval, 2), ha='center', va='bottom', color=colors_for_charts[0])\
\
# --- Gr\'e1fico 2: PDA Evitado (ton/a\'f1o) ---\
pda_values = [pda_evitada_base_ejemplo, pda_evitada_ton_a\'f1o]\
bars2 = ax2.bar(x, pda_values, width=bar_width, color=[colors_for_charts[2], colors_for_charts[3]])\
ax2.set_ylabel('Toneladas/a\'f1o', fontsize=12, color=colors_for_charts[0])\
ax2.set_title('P\'e9rdida y Desperdicio de Alimentos Evitado', fontsize=14, color=colors_for_charts[3], pad=20) # Aumentado pad\
ax2.set_xticks(x)\
ax2.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax2.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax2.spines['top'].set_visible(False)\
ax2.spines['right'].set_visible(False)\
ax2.tick_params(axis='x', length=0)\
ax2.set_ylim(bottom=0)\
for bar in bars2:\
    yval = bar.get_height()\
    ax2.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, round(yval, 2), ha='center', va='bottom', color=colors_for_charts[0])\
\
# --- Gr\'e1fico 3: P\'e9rdidas Econ\'f3micas Evitadas (USD/a\'f1o) ---\
perdidas_eco_values = [perdidas_economicas_pda_base_ejemplo, perdidas_economicas_pda_evitada_usd_a\'f1o]\
bars3 = ax3.bar(x, perdidas_eco_values, width=bar_width, color=[colors_for_charts[1], colors_for_charts[0]])\
ax3.set_ylabel('USD/a\'f1o', fontsize=12, color=colors_for_charts[3])\
ax3.set_title('P\'e9rdidas Econ\'f3micas Asociadas a PDA Evitada', fontsize=14, color=colors_for_charts[3], pad=20) # Aumentado pad\
ax3.set_xticks(x)\
ax3.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax3.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax3.spines['top'].set_visible(False)\
ax3.spines['right'].set_visible(False)\
ax3.tick_params(axis='x', length=0)\
ax3.set_ylim(bottom=0)\
for bar in bars3:\
    yval = bar.get_height()\
    ax3.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, f"$\{int(yval):,\}", ha='center', va='bottom', color=colors_for_charts[0])\
\
plt.tight_layout(rect=[0, 0.05, 1, 0.95])\
st.pyplot(fig)\
\
# --- Funcionalidad de descarga de cada gr\'e1fico ---\
st.markdown("---")\
st.subheader("Descargar Gr\'e1ficos Individualmente")\
\
# Funci\'f3n auxiliar para generar el bot\'f3n de descarga\
def download_button(fig, filename_prefix, key):\
    buf = BytesIO()\
    fig.savefig(buf, format="png", bbox_inches="tight", dpi=300)\
    st.download_button(\
        label=f"Descargar \{filename_prefix\}.png",\
        data=buf.getvalue(),\
        file_name=f"\{filename_prefix\}.png",\
        mime="image/png",\
        key=key\
    )\
\
# Crear figuras individuales para cada gr\'e1fico para poder descargarlas\
# Figura 1: Reducci\'f3n Sorbato\
fig_sorbato, ax_sorbato = plt.subplots(figsize=(8, 6), facecolor=color_primario_3_rgb)\
ax_sorbato.bar(x, sorbato_values, width=bar_width, color=[colors_for_charts[0], colors_for_charts[1]])\
ax_sorbato.set_ylabel('Kilogramos/a\'f1o', fontsize=12, color=colors_for_charts[3])\
ax_sorbato.set_title('Reducci\'f3n Uso Sorbato de Potasio', fontsize=14, color=colors_for_charts[3], pad=20)\
ax_sorbato.set_xticks(x)\
ax_sorbato.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax_sorbato.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax_sorbato.spines['top'].set_visible(False)\
ax_sorbato.spines['right'].set_visible(False)\
ax_sorbato.tick_params(axis='x', length=0)\
ax_sorbato.set_ylim(bottom=0)\
for bar in ax_sorbato.patches:\
    yval = bar.get_height()\
    ax_sorbato.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, round(yval, 2), ha='center', va='bottom', color=colors_for_charts[0])\
plt.tight_layout()\
download_button(fig_sorbato, "Reduccion_Sorbato", "download_sorbato")\
plt.close(fig_sorbato)\
\
# Figura 2: PDA Evitado\
fig_pda, ax_pda = plt.subplots(figsize=(8, 6), facecolor=color_primario_3_rgb)\
ax_pda.bar(x, pda_values, width=bar_width, color=[colors_for_charts[2], colors_for_charts[3]])\
ax_pda.set_ylabel('Toneladas/a\'f1o', fontsize=12, color=colors_for_charts[0])\
ax_pda.set_title('P\'e9rdida y Desperdicio de Alimentos Evitado', fontsize=14, color=colors_for_charts[3], pad=20)\
ax_pda.set_xticks(x)\
ax_pda.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax_pda.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax_pda.spines['top'].set_visible(False)\
ax_pda.spines['right'].set_visible(False)\
ax_pda.tick_params(axis='x', length=0)\
ax_pda.set_ylim(bottom=0)\
for bar in ax_pda.patches:\
    yval = bar.get_height()\
    ax_pda.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, round(yval, 2), ha='center', va='bottom', color=colors_for_charts[0])\
plt.tight_layout()\
download_button(fig_pda, "PDA_Evitado", "download_pda")\
plt.close(fig_pda)\
\
# Figura 3: P\'e9rdidas Econ\'f3micas Evitadas\
fig_perdidas_eco, ax_perdidas_eco = plt.subplots(figsize=(8, 6), facecolor=color_primario_3_rgb)\
ax_perdidas_eco.bar(x, perdidas_eco_values, width=bar_width, color=[colors_for_charts[1], colors_for_charts[0]])\
ax_perdidas_eco.set_ylabel('USD/a\'f1o', fontsize=12, color=colors_for_charts[3])\
ax_perdidas_eco.set_title('P\'e9rdidas Econ\'f3micas Asociadas a PDA Evitada', fontsize=14, color=colors_for_charts[3], pad=20)\
ax_perdidas_eco.set_xticks(x)\
ax_perdidas_eco.set_xticklabels(labels, rotation=15, color=colors_for_charts[0])\
ax_perdidas_eco.yaxis.set_tick_params(colors=colors_for_charts[0])\
ax_perdidas_eco.spines['top'].set_visible(False)\
ax_perdidas_eco.spines['right'].set_visible(False)\
ax_perdidas_eco.tick_params(axis='x', length=0)\
ax_perdidas_eco.set_ylim(bottom=0)\
for bar in ax_perdidas_eco.patches:\
    yval = bar.get_height()\
    ax_perdidas_eco.text(bar.get_x() + bar.get_width()/2, yval + 0.05 * yval, f"$\{int(yval):,\}", ha='center', va='bottom', color=colors_for_charts[0])\
plt.tight_layout()\
download_button(fig_perdidas_eco, "Perdidas_Economicas_Evitadas_PDA", "download_perdidas_eco")\
plt.close(fig_perdidas_eco)\
\
\
st.markdown("---")\
st.markdown("### Informaci\'f3n Adicional:")\
st.markdown(f"- **Estado de Avance y Recomendaciones:** El proyecto cuenta con validaci\'f3n t\'e9cnica en laboratorio. Se recomienda avanzar hacia una validaci\'f3n industrial (TRL 8), incorporando la tecnolog\'eda en una planta procesadora bajo condiciones reales de operaci\'f3n.")\
\
st.markdown("---")\
# Texto de atribuci\'f3n centrado\
st.markdown("<div style='text-align: center;'>Visualizador Creado por el equipo Sustrend SpA en el marco del Proyecto TT GREEN Foods</div>", unsafe_allow_html=True)\
\
# Aumentar el espaciado antes de los logos\
st.markdown("<br>", unsafe_allow_html=True)\
st.markdown("<br>", unsafe_allow_html=True)\
\
# --- Mostrar Logos ---\
col_logos_left, col_logos_center, col_logos_right = st.columns([1, 2, 1])\
\
with col_logos_center:\
    sustrend_logo_url = "https://drive.google.com/uc?id=1vx_znPU2VfdkzeDtl91dlpw_p9mmu4dd"\
    ttgreenfoods_logo_url = "https://drive.google.com/uc?id=1uIQZQywjuQJz6Eokkj6dNSpBroJ8tQf8"\
\
    try:\
        sustrend_response = requests.get(sustrend_logo_url)\
        sustrend_response.raise_for_status()\
        sustrend_image = Image.open(BytesIO(sustrend_response.content))\
\
        ttgreenfoods_response = requests.get(ttgreenfoods_logo_url)\
        ttgreenfoods_response.raise_for_status()\
        ttgreenfoods_image = Image.open(BytesIO(ttgreenfoods_response.content))\
\
        st.image([sustrend_image, ttgreenfoods_image], width=100)\
    except requests.exceptions.RequestException as e:\
        st.error(f"Error al cargar los logos desde las URLs. Por favor, verifica los enlaces: \{e\}")\
    except Exception as e:\
        st.error(f"Error inesperado al procesar las im\'e1genes de los logos: \{e\}")\
\
st.markdown("<div style='text-align: center; font-size: small; color: gray;'>Vi\'f1a del Mar, Valpara\'edso, Chile</div>", unsafe_allow_html=True)\
\
st.sidebar.markdown("---")\
st.sidebar.markdown(f"<div style='text-align: center; font-size: smaller; color: gray;'>Versi\'f3n del Visualizador: 1.5</div>", unsafe_allow_html=True) # Actualizada la versi\'f3n\
st.sidebar.markdown(f"<div style='text-align: center; font-size: x-small; color: lightgray;'>Desarrollado con Streamlit</div>", unsafe_allow_html=True)}